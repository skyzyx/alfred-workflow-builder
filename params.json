{"name":"Alfred Workflow Builder","tagline":"Build Alfred workflows with PHP","body":"# Alfred Workflow Builder\r\n\r\nAlfred Workflow Builder is a PHP class for creating workflows with Alfred 2. This class provides functions for working\r\nwith plist settings files, reading and writing data to files, generating Alfred feedback results, and more.\r\n\r\n\r\n## Installation\r\n\r\n[Composer](http://getcomposer.org) is the recommended way to install is package. Composer is dependency management tool\r\nfor PHP that allows you to declare the dependencies your project needs and installs them into your project.\r\n\r\n1. Add `skyzyx/alfred-workflow-builder` as a dependency in your project's `composer.json` file.\r\n\r\n\t```json\r\n\t{\r\n\t    \"require\": {\r\n\t        \"skyzyx/alfred-workflow-builder\": \"1.0.*\"\r\n\t    }\r\n\t}\r\n\t```\r\n\r\n2. Download and install Composer.\r\n\r\n\t```bash\r\n\tcurl -s \"http://getcomposer.org/installer\" | php\r\n\t```\r\n\r\n3. Install your dependencies.\r\n\r\n\t```bash\r\n\tphp composer.phar install --optimize-autoloader\r\n\t```\r\n\r\n4. Require Composer's autoloader.\r\nComposer also prepares an autoload file that's capable of autoloading all of the classes in any of the libraries that\r\nit downloads. To use it, just add the following line to your code's bootstrap process.\r\n\r\n\t```php\r\n\trequire 'vendor/autoload.php';\r\n\t```\r\n\r\nThe [original version of this class](https://github.com/jdfwarrior/Workflows) (written by [David Ferguson](http://dferg.us))\r\nhad methods for things like caching data to local files and fetching remote data over HTTP. Instead, we recommend you use\r\n[Guzzle](http://guzzlephp.org), [Requests](http://requests.ryanmccue.info) or [Buzz](https://github.com/kriswallsmith/Buzz)\r\nfor HTTP requests and [Doctrine Cache](http://docs.doctrine-project.org/en/2.0.x/reference/caching.html) for local file\r\nsystem caching. If you'd also like logging, we recommend [Monolog](https://github.com/Seldaek/monolog).\r\n\r\n----\r\n\r\n## Alfred\\Workflow\r\n\r\n```php\r\nuse Alfred\\Workflow;\r\n\r\n// Pass a Bundle ID\r\n$w = new Workflow('com.ryanparman.my-workflow');\r\n#=> <Alfred\\Workflow>\r\n```\r\n\r\n### `string` toXML()\r\nAccepts a properly formatted array or json object and converts it to XML for creating Alfred feedback results. If results\r\nhave been created using the `result()` function, then passing no arguments will use the array of results created using\r\nthe `result()` function.\r\n\r\n#### Example using result function\r\n```php\r\n$w->result(array(\r\n    'uid'          => 'itemuid',\r\n    'arg'          => 'itemarg',\r\n    'title'        => 'Some Item Title',\r\n    'subtitle'     => 'Some item subtitle',\r\n    'icon'         => 'icon.png',\r\n    'valid'        => 'yes',\r\n    'autocomplete' => 'autocomplete'\r\n));\r\necho $w->toXML();\r\n```\r\n\r\n#### Example using array\r\n```php\r\n$results = array();\r\n$temp = array(\r\n    'uid'          => 'itemuid',\r\n    'arg'          => 'itemarg',\r\n    'title'        => 'Some Item Title',\r\n    'subtitle'     => 'Some item subtitle',\r\n    'icon'         => 'icon.png',\r\n    'valid'        => 'yes',\r\n    'autocomplete' => 'autocomplete'\r\n);\r\narray_push($results, $temp);\r\necho $w->toXML($results);\r\n```\r\n\r\n#### Result\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<items>\r\n    <item uid=\"itemuid\" arg=\"itemarg\" autocomplete=\"autocomplete\">\r\n        <title>Some Item Title</title>\r\n        <subtitle>Some item subtitle</subtitle>\r\n        <icon>icon.png</icon>\r\n    </item>\r\n</items>\r\n```\r\n\r\n### `array` mdfind()\r\nExecutes an `mdfind` command and returns results as an array of matching files.\r\n\r\n```php\r\n$results = $w->mdfind('\"kMDItemContentType == com.apple.mail.emlx\"');\r\n/* or */\r\n$results = $w->mdfind('Alfred 2.app');\r\n#=> (array) ['/Applications/Alfred 2.app']\r\n```\r\n\r\nYou can learn more about querying the OS X metadata service by checking out:\r\n* [Using Spotlight from the OS X Commandline](http://0xfe.blogspot.com/2006/03/using-spotlight-from-os-x-commandline.html)\r\n* [File Metadata Query Expression Syntax](https://developer.apple.com/library/mac/#documentation/carbon/conceptual/spotlightquery/concepts/queryformat.html)\r\n* [Spotlight Metadata Attributes](https://developer.apple.com/library/mac/#documentation/carbon/Reference/MetadataAttributesRef/Reference/CommonAttrs.html#//apple_ref/doc/uid/TP40001694-SW1)\r\n\r\n### `array` result()\r\nCreates a new result item that is cached within the class object. This set of results is available via the `results()`\r\nfunctions, or, can be formatted and returned as XML via the `toXML()` function.\r\n\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Key</th>\r\n            <th>Usage</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td><code>uid</code></td>\r\n            <td><p>Unique ID for the search result. (Required)</p></td>\r\n        </tr>\r\n        <tr>\r\n            <td><code>arg</code></td>\r\n            <td><p>Argument for this result. This will get fed into any downstream actions. (Required)</p></td>\r\n        </tr>\r\n        <tr>\r\n            <td><code>title</code></td>\r\n            <td><p>The main title for the result. (Required)</p></td>\r\n        </tr>\r\n        <tr>\r\n            <td><code>subtitle</code></td>\r\n            <td><p>The subtitle for the result. (Required)</p></td>\r\n        </tr>\r\n        <tr>\r\n            <td><code>icon</code></td>\r\n            <td><p>The icon that this result should have. This should typically be <code>icon.png</code>. (Required)</p></td>\r\n        </tr>\r\n        <tr>\r\n            <td><code>valid</code></td>\r\n            <td><p>If you press enter with this result selected, should it trigger downstream actions? Valid values are\r\n                <code>\"yes\"</code>, <code>\"no\"</code>, <code>true</code> and <code>false</code>. The default value is\r\n                <code>\"yes\"</code>.</p></td>\r\n        </tr>\r\n        <tr>\r\n            <td><code>autocomplete</code></td>\r\n            <td><p>If you press enter with this result selected, what value should pop up as an autocomplete value?\r\n                (<a href=\"http://simonbs.dk/post/41727742869/movies-workflow-for-alfred-2-0\">Movies</a> is a good usage\r\n                example.)</p></td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n#### Example\r\n```php\r\n$w->result(array (\r\n    'uid'          => 'alfred',\r\n    'arg'          => 'alfredapp',\r\n    'title'        => 'Alfred',\r\n    'subtitle'     => '/Applications/Alfred.app',\r\n    'icon'         => 'fileicon:/Applications/Alfred.app',\r\n    'valid'        => 'yes',\r\n    'autocomplete' => 'Alfredapp',\r\n));\r\necho $w->toXML();\r\n```\r\n\r\n#### Result\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<items>\r\n    <item uid=\"alfred\" arg=\"alfredapp\" autocomplete=\"Alfredapp\">\r\n        <title>Alfred</title>\r\n        <subtitle>/Applications/Alfred.app</subtitle>\r\n        <icon type=\"fileicon\">/Applications/Alfred.app</icon>\r\n    </item>\r\n</items>\r\n```\r\n\r\n----\r\n\r\n## Alfred\\Storage\\Plist\r\n\r\n```php\r\nuse Alfred\\Storage\\Plist;\r\n\r\n// Pass a Bundle ID and Plist name\r\n$plist = new Plist('com.ryanparman.my-workflow', 'info');\r\n#=> <Alfred\\Storage\\Plist>\r\n```\r\n\r\n### `string` setValue()\r\nStores a key-value pair.\r\n\r\n```php\r\n$plist->setValue('username', 'rparman');\r\n```\r\n\r\n### `string` setValues()\r\nStores a series of key-value pairs.\r\n\r\n```php\r\n$plist->setValues(array(\r\n    'username' => 'rparman',\r\n    'password' => 'abc123',\r\n    'zipcode'  => '90210',\r\n));\r\n```\r\n\r\n### `string` getValue()\r\nRetrieves the value of a key.\r\n\r\n```php\r\n$username = $plist->getValue('username');\r\n#=> (string) rparman\r\n```\r\n\r\n## More!\r\nYou can learn more about Alfred 2 Workflows by checking out <http://support.alfredapp.com/workflows>.\r\n\r\nYou can also deconstruct some workflows that are built with Alfred Workflow Builder.\r\n* [Packagist](https://github.com/skyzyx/packagist.alfredworkflow)\r\n* [Geolocation](https://github.com/skyzyx/geolocation.alfredworkflow)\r\n* [Mimetypes](https://github.com/skyzyx/mimetypes.alfredworkflow)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}